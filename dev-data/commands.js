// geliÅŸtirme aÅŸamasÄ±nda mongdbdeki verilerin sÄ±kÃ§a deÄŸiÅŸeceÄŸinden veya bozulacaÄ±ndan veritabanÄ±ndaki verileri temizlemeye ve json dosyasÄ±ndaki verileri veritabanÄ±na aktarmaya yarayan ve terminalden komutlarla Ã§alÄ±ÅŸacak 2 fonksiyon yazalÄ±m


const Tour = require('../models/tourModel.js')
const mongoose = require('mongoose')
const fs = require('fs')

//.env dosyasÄ±nda deÄŸiÅŸkenlere eriÅŸim saÄŸlayan kÃ¼tÃ¼phanedir
require('dotenv').config()

//console.log(process.env)

//mongodb veri tabanÄ±na baÄŸlan
//mongoose.connect() veri tabanÄ±na baÄŸlanmamÄ±zÄ± saÄŸlÄ±yor
mongoose
    //.connect('mongodb://localhost:27017') yerine artÄ±k
    .connect(process.env.MONGO_URL) //yazdÄ±k
    .then(() => {
        console.log('âœ… veri tabanÄ±na baÄŸlanÄ±ldÄ±')
    })
    .catch((err) => {
        console.log('ğŸŸ¥ veri tabanÄ±na baÄŸlanamadÄ± !!!')
    })

//json dosyasÄ±ndan verileri al(dirname mevcut klasÃ¶rÃ¼ veriyor)
const tours = JSON.parse(
    fs.readFileSync(`${__dirname}/data/tours-simple.json`))

//devdata klasÃ¶rÃ¼ndeki json dosyalarÄ±nÄ± veritabanÄ±na aktarÄ±r
const importData = async () => {
    try {
        await Tour.create(tours)
        console.log('veriler import edildi')
    } catch (err) {
        console.log(err)
    }
    process.exit()
}

//mongodbdeki verileri
const clearData = async () => {
    try {
        await Tour.deleteMany()
        console.log('veriler silindi')
    } catch (err) {
        console.log(err)
    }
    //terminalde komut satÄ±rÄ±na dÃ¼ÅŸmesi iÃ§in iÅŸlemin sonlanmasÄ± lazÄ±m
    process.exit()
}

//Ã§alÄ±ÅŸtÄ±rÄ±lan komutun sonuna eklenen bayraÄŸa gÃ¶re doÄŸru fonksiyonu tetikle
//console.log(process.argv);
if (process.argv.includes('--import')) {
    importData();
} else if (process.argv.includes('--clear')) {
    clearData();
}
